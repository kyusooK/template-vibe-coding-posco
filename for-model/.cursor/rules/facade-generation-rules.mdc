---

description: "Used as reference when generating facade module code for configuring package structure, fixed generation files, and dynamic generation files."
alwaysApply: false
---

# Facade Generation Rules - {service name}-facade module

## Package Structure

### Generation Rules
Since code generation is requested by Aggregate unit in DDD Model, if the module structure has already been created, skip the package structure creation and proceed with generating files that should be created for each Aggregate unit.

```
{service name}/
└── {service name}-facade/
    ├── pom.xml                                    # Maven project configuration (Fixed Generation)
    ├── src/
    │   ├── main/
    │   │   ├── java/
    │   │   │   └── com/
    │   │   │       └── poscodx/
    │   │   │           └── sample/
    │   │   │               └── {service name}/
    │   │   │                   └── facade/
    │   │   │                       ├── event/           # Event handling (Dynamic Generation)
    │   │   │                       │   ├── TimeEventListener.java
    │   │   │                       │   └── topic_channelListener.java
    │   │   │                       └── rest/
    │   │   │                           ├── exception/   # Exception handling (Fixed Generation)
    │   │   │                           │   └── KafkaExceptionHandler.java
    │   │   │                           ├── feature/     # Feature REST controllers (Dynamic Generation)
    │   │   │                           │   ├── {entityName}ActionResource.java
    │   │   │                           │   └── {entityName}FlowResource.java
    │   │   │                           └── store/       # Store CRUD REST controllers (Dynamic Generation)
    │   │   │                               └── {entityName}Resource.java
    │   │   └── resources/

```

## Fixed Generation Files

### 1. pom.xml
Maven project configuration file with dependencies and build settings defined by referencing `@pom-generation-rules`.

### 2. KafkaExceptionHandler.java
Controller advice class responsible for global exception handling.

**Generation Rules:**
- Package name: `com.poscodx.sample.{service name}.facade.rest.exception`
- Class name: `KafkaExceptionHandler` (fixed)

```java
package com.poscodx.sample.{service name}.facade.rest.exception;

import com.poscodx.base.share.domain.errorobjects.PosBaseException;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

@Slf4j
@ControllerAdvice
public class KafkaExceptionHandler {

    private void logException(Exception e) {
        log.error(e.getMessage(), e);
    }

    @ExceptionHandler(PosBaseException.class)
    public ResponseEntity<String> handlePosBaseException(PosBaseException exception) {
        log.debug("=====handlePosBaseException=====");
        this.logException(exception);
        ResponseEntity retVal = ResponseEntity.status(exception.getCode()).body(exception.getMessage());
        return retVal;
    }

    @ExceptionHandler(RuntimeException.class)
    public ResponseEntity<String> handleRuntimeException(RuntimeException exception) {
        log.debug("=====handleRuntimeException=====");
        this.logException(exception);
        PosBaseException e = new PosBaseException(exception);
        ResponseEntity retVal = ResponseEntity.status(e.getCode()).body(e.getMessage());
        return retVal;
    }

    @ExceptionHandler(Exception.class)
    public ResponseEntity<String> handleException(Exception exception) {
        log.debug("=====handleException=====");
        this.logException(exception);
        PosBaseException e = new PosBaseException(exception);
        ResponseEntity retVal = ResponseEntity.status(e.getCode()).body(e.getMessage());
        return retVal;
    }
}
```

### 3. TimeEventListener.java
Listener class that handles time-based events.

**Generation Rules:**
- Package name: `com.poscodx.sample.{service name}.facade.event`
- Class name: `TimeEventListener` (fixed)

```java
package com.poscodx.sample.{service name}.facade.event;

import java.util.function.Consumer;
import com.poscodx.reuse.common.util.kafka.annotation.PosEventHandler;
import lombok.extern.slf4j.Slf4j;
import org.springframework.messaging.Message;
import org.springframework.stereotype.Component;

@Slf4j
@Component("timeevent")
public class TimeEventListener
    implements Consumer<Message<String>>
{

    @PosEventHandler
    @Override
    public void accept(Message<String> message) {
        String payload = message.getPayload();
        // TODO
        // T obj = JsonUtil.fromJson(payload, T)
        // someFlow.someMethod(obj)
    }
    
    // TODO 
    // private final SomeFlow someFlow; 

}
```

### 4. topic_channelListener.java
Listener class that handles topic channel events.

**Generation Rules:**
- Package name: `com.poscodx.sample.{service name}.facade.event`
- Class name: `topic_channelListener` (fixed)

```java
package com.poscodx.sample.{service name}.facade.event;

import java.util.function.Consumer;
import com.poscodx.reuse.common.util.kafka.annotation.PosEventHandler;
import lombok.extern.slf4j.Slf4j;
import org.springframework.messaging.Message;
import org.springframework.stereotype.Component;

@Slf4j
@Component("topic_channel")
public class topic_channelListener
    implements Consumer<Message<String>>
{

    @PosEventHandler
    @Override
    public void accept(Message<String> message) {
        String payload = message.getPayload();
        // TODO
        // T obj = JsonUtil.fromJson(payload, T)
        // someFlow.someMethod(obj)
    }
    
    // TODO 
    // private final SomeFlow someFlow; 

}
```

## Dynamic Generation Files Rules

Files to be generated for each Aggregate of boundedContext according to the nature of DDD microservices, and detailed code and paths should be changed dynamically by referencing the metadata.

### 1. {entityName}Resource.java (Store CRUD Controller)
Controller that provides basic CRUD REST API for domain entities.

**Generation Rules:**
- Package name: `com.poscodx.sample.{project name}.facade.rest.store`
- Class name: `{entityName}Resource` (first letter uppercase)
- REST mapping: `/{entity-name}` (kebab-case)
- Basic CRUD methods: findAll, find, register, modify, remove

**Example Code:**
```java
package com.poscodx.sample.{service name}.facade.rest.store;

import java.util.List;
import com.poscodx.base.share.domain.NameValueList;
import com.poscodx.sample.{service name}.store.domain.entity.project;
import com.poscodx.sample.{service name}.store.domain.logic.projectLogic;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@Slf4j
@RequiredArgsConstructor
@CrossOrigin("*")
@RestController
@RequestMapping(path = "/project")
public class projectResource {
    private final projectLogic logic;

    @GetMapping(path = "/all")
    public List<project> findAll() {
        return this.logic.findAll();
    }

    @GetMapping(path = "/{id}")
    public project find(@PathVariable("id") Integer id) {
        return this.logic.find(id);
    }

    @PostMapping
    public project register(@org.springframework.web.bind.annotation.RequestBody project entity) {
        return this.logic.register(entity);
    }

    @PutMapping(path = "/{id}")
    public project modify(@PathVariable("id") Integer id, @org.springframework.web.bind.annotation.RequestBody NameValueList nameValues) {
        return this.logic.modify(id, nameValues);
    }

    @DeleteMapping(path = "/{id}")
    public void remove(@PathVariable("id") Integer id) {
        this.logic.remove(id);
    }
}
```

### 2. {entityName}ActionResource.java (Feature Action Controller)
REST API controller that handles business actions.

**Generation Rules:**
- Package name: `com.poscodx.sample.{project name}.facade.rest.feature`
- Class name: `{entityName}ActionResource` (first letter uppercase)
- REST mapping: `/{entity-name}-action` (kebab-case)
- Action component dependency injection

**Example Code:**
```java
package com.poscodx.sample.{service name}.facade.rest.feature;

import com.poscodx.sample.{service name}.feature.action.projectAction;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@Slf4j
@RequiredArgsConstructor
@RestController
@RequestMapping(path = "/project-action")
public class projectActionResource {
    private final projectAction action;
    
    /* 
    // TODO : Biz Logic 구현 
    // 1. 필요한 컴포넌트 선언 
    private final SomeComponent someComponent; 
    private final SomeLogic someLogic; 
    private final SomeAction someAction; 
    private final SomeFlow someFlow; 

    // 2. 필요한 메소드 정의 및 구현 
    public void someMethod() { 
        someComponent.someMethod(); 
        someLogic.someMethod(); 
        someAction.someMethod(); 
        someFlow.someMethod(); 
        flow.someMethod(); 
    } 
    public String someMessageTest(Locale locale, String ... args) { 
        return messageSource.getMessage("SOME_MESSAGE_ID", args, locale);
    } 
    */ 
}
```

### 3. {entityName}FlowResource.java (Feature Flow Controller)
REST API controller that handles business flows.

**Generation Rules:**
- Package name: `com.poscodx.sample.{project name}.facade.rest.feature`
- Class name: `{entityName}FlowResource` (first letter uppercase)
- REST mapping: `/{entity-name}-flow` (kebab-case)
- Flow component dependency injection

**Example Code:**
```java
package com.poscodx.sample.{service name}.facade.rest.feature;

import com.poscodx.sample.{service name}.feature.flow.projectFlow;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;


@Slf4j
@RequiredArgsConstructor
@RestController
@RequestMapping(path = "/project-flow")
public class projectFlowResource {
    private final projectFlow flow;
    
    /* 
    // TODO : Biz Logic 구현 
    // 1. 필요한 컴포넌트 선언 
    private final SomeComponent someComponent; 
    private final SomeLogic someLogic; 
    private final SomeAction someAction; 
    private final SomeFlow someFlow; 

    // 2. 필요한 메소드 정의 및 구현 
    public void someMethod() { 
        someComponent.someMethod(); 
        someLogic.someMethod(); 
        someAction.someMethod(); 
        someFlow.someMethod(); 
        flow.someMethod(); 
    } 
    public String someMessageTest(Locale locale, String ... args) { 
        return messageSource.getMessage("SOME_MESSAGE_ID", args, locale);
    } 
    */ 
}
```

## Generation Guidelines

1. **Fixed generation files** are generated based on the content specified above according to the service name.
2. **Dynamic generation files** are generated dynamically based on domain entity metadata.
3. **Package structure** is unified in the form of `com.poscodx.sample.{service name}`.
4. **Exception Handler** is fixed as `KafkaExceptionHandler`.
5. **Event listeners** are generated fixed for Kafka-related event handling:
   - TimeEventListener.java
   - topic_channelListener.java
6. REST mapping paths use entity names converted to kebab-case.
7. CRUD controllers include 5 basic methods (findAll, find, register, modify, remove).
8. Feature controllers depend on corresponding Action/Flow components and include TODO comments for business logic implementation.
9. **DDD microservice-based changes**: File paths and detailed content should be created by referencing metadata for changes that need to be made based on DDD microservices.
