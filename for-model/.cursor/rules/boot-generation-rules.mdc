---

description: "Used as reference when generating boot module code for configuring package structure, fixed generation files, and dynamic generation files."
alwaysApply: false
---

# Boot Generation Rules - {service name}-boot module

## Package Structure

### Generation Rules
Since code generation is requested by Aggregate unit in DDD Model, if the module structure has already been created, skip the package structure creation and proceed with generating files that should be created for each Aggregate unit.

```
{service name}/
└── {service name}-boot/
    ├── pom.xml                                    # Maven project configuration (Fixed Generation)
    ├── src/
    │   ├── main/
    │   │   ├── java/
    │   │   │   └── com/
    │   │   │       └── poscodx/
    │   │   │           └── kafka/
    │   │   │               └── {service name}/
    │   │   │                   ├── config/       # Configuration classes (Dynamic Generation)
    │   │   │                   │   └── GsonHttpMessageConverterConfiguration.java
    │   │   │                   └── KafkaApplication.java  # Main application class (Dynamic Generation)
    │   │   └── resources/
    │   │       ├── application.yml               # Basic application configuration (Fixed Generation)
    │   │       ├── application-local.yml         # Local environment configuration (Fixed Generation)
    │   │       ├── application-dev.yml           # Development environment configuration (Fixed Generation)
    │   │       ├── bootstrap.yml                 # Bootstrap configuration (Fixed Generation)
    │   │       ├── log4j2-local.xml             # Local logging configuration (Fixed Generation)
    │   │       └── log4j2-cloud.xml             # Cloud logging configuration (Fixed Generation)

```

## Fixed Generation Files

### 1. pom.xml
Maven project configuration file with dependencies and build settings defined by referencing `@pom-generation-rules`.

### 2. application.yml
Spring Boot basic application configuration file.

```yaml
server:
  servlet:
    context-path: /{service name}-kafka
spring:
  datasource:
    url: ${datasource.url}
    username: ${datasource.username}
    password: ${datasource.password}
    driver-class-name: ${datasource.driver-class-name}
    hikari:
      maximum-pool-size: ${datasource.hikari.maximum-pool-size}
      minimum-idle: ${datasource.hikari.minimum-idle}
  mvc:
    converters:
      preferred-json-mapper: gson
  cloud:
    stream:
      default:
        group: ${spring.application.name}
      kafka:
        binder:
          brokers: ${kafka.brokers}
          zkNodes: ${kafka.zkNodes}
        default:
          consumer:
            ackMode: RECORD
      function:
        definition: topic_channel
      bindings:
        default:
          consumer:
            enableDlq: true
            maxAttempts: 2147483647
        topic_channel-in-0:
          destination: topicname
          consumer:
            maxAttempts: 1
poscoict:
  reuse:
    offset-n-skip:
      jdbcUrl: ${reuse.datasource.url}
      username: ${reuse.datasource.username}
      password: ${reuse.datasource.password}
      driverClassName: ${datasource.driver-class-name}
      hikari:
        maximum-pool-size: ${datasource.hikari.maximum-pool-size}
        minimum-idle: ${datasource.hikari.minimum-idle}
```

### 3. application-local.yml
Application configuration file for local environment.

```yaml
server:
  port: 8088
datasource:
  url: jdbc:postgresql://10.125.2.121:5432/jiradb
  username: jirauser
  password: jira12#
  driver-class-name: org.postgresql.Driver
  hikari:
    maximum-pool-size: 3
    minimum-idle: 1
logging:
  config: classpath:log4j2-local.xml
```

### 4. application-dev.yml
Application configuration file for development environment.

```yaml
server:
  port: 8080
datasource:
  url: jdbc:postgresql://10.125.2.121:5432/jiradb
  username: jirauser
  password: jira12#
  driver-class-name: org.postgresql.Driver
  hikari:
    maximum-pool-size: 10
    minimum-idle: 1
logging:
  config: classpath:log4j2-cloud.xml
```

### 5. bootstrap.yml
Bootstrap configuration file for Spring Cloud Config.

```yaml
spring:
  cloud:
    config:
      uri: ${bootstrap-config.uri}
  application:
    name: {service name}-kafka
  profiles:
    active: local
bootstrap-config:
  uri: http://pit01u-config:8080/pit01u-config
```

### 6. log4j2-local.xml
Log4j2 configuration file for local environment.

```xml
<?xml version="1.0" encoding="utf-8"?>
<Configuration>
    <Appenders>
        <Console name="CONSOLE" target="SYSTEM_OUT">
            <PatternLayout>
                <pattern>[%-5level] [%T] %d{yyyy-MM-dd HH:mm:ss.SSS} %c{1} - %msg%n</pattern>
            </PatternLayout>
        </Console>
    </Appenders>
    <Loggers>
        <Root level="INFO">
            <AppenderRef ref="CONSOLE"/>
        </Root>
        <Logger name="com.poscoict" level="TRACE" additivity="false">
            <AppenderRef ref="CONSOLE"/>
        </Logger>
        <Logger name="com.posco" level="TRACE" additivity="false">
            <AppenderRef ref="CONSOLE"/>
        </Logger>
    </Loggers>
</Configuration>
```

### 7. log4j2-cloud.xml
Log4j2 configuration file for cloud environment.

```xml
<?xml version="1.0" encoding="utf-8"?>
<Configuration>
    <Appenders>
        <Console name="CONSOLE" target="SYSTEM_OUT">
            <PatternLayout>
                <pattern>[%-5level] [%T] %d{yyyy-MM-dd HH:mm:ss.SSS} |%X{x-traceId}|%X{x-spanId}|%X{x-transactionCodeOrViewId}|%c - %msg%n</pattern>
            </PatternLayout>
        </Console>
    </Appenders>
    <Loggers>
        <Root level="WARN">
            <AppenderRef ref="CONSOLE"/>
        </Root>
        <Logger name="com.posco" level="DEBUG" additivity="false">
            <AppenderRef ref="CONSOLE"/>
        </Logger>
        <Logger name="com.poscoict" level="DEBUG" additivity="false">
            <AppenderRef ref="CONSOLE"/>
        </Logger>
        <Logger name="org.apache.kafka" level="INFO" additivity="false">
            <AppenderRef ref="CONSOLE"/>
        </Logger>
        <Logger name="org.springframework" level="INFO" additivity="false">
            <AppenderRef ref="CONSOLE"/>
        </Logger>
    </Loggers>
</Configuration>
```

## Dynamic Generation Files Rules

Files to be generated for each Aggregate of boundedContext according to the nature of DDD microservices, and detailed code and paths should be changed dynamically by referencing the metadata.

### 1. KafkaApplication.java
Main application class generated based on project metadata.

**Generation Rules:**
- Package name: `com.poscodx.sample.{project name}`
- Class name: `KafkaApplication` (fixed)
- EntityScan and EnableJpaRepositories basePackages are set according to project package structure
- Add kafka-related packages to scanBasePackages

**Example Code:**
```java
package com.poscodx.sample.msaez0;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@SpringBootApplication(scanBasePackages = {
    "com.poscodx.sample.{service name}",
    "com.poscodx.reuse.common.util.kafka"
})
@EntityScan(basePackages = {
    "com.poscodx.sample.{service name}",
    "com.poscodx.reuse.common.util.kafka.db"
})
@EnableJpaRepositories(basePackages = {
    "com.poscodx.sample.{service name}",
    "com.poscodx.reuse.common.util.kafka.db"
})
@RestController
public class KafkaApplication {

    public static void main(String[] args) {
        SpringApplication.run(KafkaApplication.class, args);
    }

    @GetMapping(path = "/health")
    public String health() {
        return "ok";
    }
}
```

### 2. GsonHttpMessageConverterConfiguration.java
HTTP message converter configuration class generated based on project metadata.

**Generation Rules:**
- Package name: `com.poscodx.sample.{project name}.config`
- Class name: Fixed (`GsonHttpMessageConverterConfiguration`)
- Include standard GSON configuration

**Example Code:**
```java
package com.poscodx.sample.{service name}.config;

import java.util.List;
import com.poscodx.base.share.util.json.JsonUtil;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.converter.json.GsonHttpMessageConverter;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class GsonHttpMessageConverterConfiguration
    implements WebMvcConfigurer
{

    @Bean
    public GsonHttpMessageConverter gsonHttpMessageConverter() {
        GsonHttpMessageConverter converter = new GsonHttpMessageConverter();
        converter.setGson(JsonUtil.getGson());
        return converter;
    }

    @Override
    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {
        converters.add(this.gsonHttpMessageConverter());
        WebMvcConfigurer.super.configureMessageConverters(converters);
    }
}
```

## Generation Guidelines
1. **Fixed generation files** are generated using the content specified above as is.
2. **Dynamic generation files** are generated dynamically based on project metadata (project name, package name, etc.).
3. **Package structure** is unified in the form of `com.poscodx.sample.{service name}`.
4. **Application class name** is fixed as `KafkaApplication`.
5. **Kafka-related configuration** is included in generation:
   - Add kafka-related packages to scanBasePackages
   - Include kafka stream configuration in application.yml
6. EntityScan and EnableJpaRepositories settings are adjusted according to project structure.
7. **DDD microservice-based changes**: File paths and detailed content should be created by referencing metadata for changes that need to be made based on DDD microservices.
8. **Environment-specific configuration**: Configuration files for local and development (dev) environments should be appropriately generated.

