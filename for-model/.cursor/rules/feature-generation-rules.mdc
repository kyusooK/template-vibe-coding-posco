---

description: "Used as reference when generating feature module code for configuring package structure, fixed generation files, and dynamic generation files."
alwaysApply: false
---

# Feature Generation Rules - {service name}-feature module

## Package Structure

### Generation Rules
Since code generation is requested by Aggregate unit in DDD Model, if the module structure has already been created, skip the package structure creation and proceed with generating files that should be created for each Aggregate unit.

```
{service name}/
└── {service name}-feature/
    ├── pom.xml                                    # Maven project configuration (Fixed Generation)
    ├── src/
    │   ├── main/
    │   │   ├── java/
    │   │   │   └── com/
    │   │   │       └── poscodx/
    │   │   │           └── sample/
    │   │   │               └── {service name}/
    │   │   │                   └── feature/
    │   │   │                       ├── action/         # Business actions (Dynamic Generation)
    │   │   │                       │   └── {entityName}Action.java
    │   │   │                       ├── domain/         # Domain services (Dynamic Generation)
    │   │   │                       └── flow/           # Business flows (Dynamic Generation)
    │   │   │                           └── {entityName}Flow.java
    │   │   └── resources/
```

## Fixed Generation Files

### 1. pom.xml
Maven project configuration file with dependencies and build settings defined by referencing `@pom-generation-rules`.

## Dynamic Generation Files Rules

Files to be generated for each Aggregate of boundedContext according to the nature of DDD microservices, and detailed code and paths should be changed dynamically by referencing the metadata.

### 1. {entityName}Action.java (Business Action)
Service class that handles single business actions.

**Generation Rules:**
- Package name: `com.poscodx.sample.{project name}.feature.action`
- Class name: `{entityName}Action` (first letter lowercase)
- Annotations: `@Service`, `@Transactional`
- Dependencies: MessageSource, {entityName}Logic

**Example Code:**
```java
package com.poscodx.sample.{service name}.feature.action;

import com.poscodx.sample.{service name}.store.domain.logic.projectLogic;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.MessageSource;
import org.springframework.stereotype.Service;

@Slf4j
@RequiredArgsConstructor
@Service
@Transactional
public class projectAction {
    private final MessageSource messageSource;
    private final projectLogic logic;
    
    /* 
    // TODO : Biz Logic 구현 
    // 1. 필요한 컴포넌트 선언 
    private final SomeComponent someComponent; 
    private final SomeLogic someLogic; 

    // 2. 필요한 메소드 정의 및 구현 
    public void someMethod() { 
        someComponent.someMethod(); 
        someLogic.someMethod(); 
        logic.someMethod(); 
    } 
    public String someMessageTest(Locale locale, String ... args) { 
        return messageSource.getMessage("SOME_MESSAGE_ID", args, locale);
    } 
    */ 
}
```

### 2. {entityName}Flow.java (Business Flow)
Service class that handles complex business flows.

**Generation Rules:**
- Package name: `com.poscodx.sample.{project name}.feature.flow`
- Class name: `{entityName}Flow` (first letter lowercase)
- Annotations: `@Service`, `@Transactional`
- Dependencies: MessageSource, {entityName}Action

**Example Code:**
```java
package com.poscodx.sample.{service name}.feature.flow;

import com.poscodx.sample.{service name}.feature.action.projectAction;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.MessageSource;
import org.springframework.stereotype.Service;

@Slf4j
@RequiredArgsConstructor
@Service
@Transactional
public class projectFlow {
    private final MessageSource messageSource;
    private final projectAction action;
    
    /* 
    // TODO : Biz Logic 구현 
    // 1. 필요한 컴포넌트 선언 
    private final SomeComponent someComponent; 
    private final SomeLogic someLogic; 
    private final SomeAction someAction; 

    // 2. 필요한 메소드 정의 및 구현 
    public void someMethod() { 
        someComponent.someMethod(); 
        someLogic.someMethod(); 
        someAction.someMethod(); 
        action.someMethod(); 
    } 
    public String someMessageTest(Locale locale, String ... args) { 
        return messageSource.getMessage("SOME_MESSAGE_ID", args, locale);
    } 
    */ 
}
```

## Generation Guidelines

1. **Fixed generation files** are generated based on the content specified above according to the service name.
2. **Dynamic generation files** are generated dynamically based on domain entity metadata.
3. **Package structure** is unified in the form of `com.poscodx.sample.{service name}`.
4. All service classes must include `@Service` and `@Transactional` annotations.
5. Action classes focus on handling single business logic, while Flow classes handle complex logic combining multiple Actions.
6. Dependency injection uses constructor injection method (`@RequiredArgsConstructor`).
7. **DDD microservice-based changes**: File paths and detailed content should be created by referencing metadata for changes that need to be made based on DDD microservices.
