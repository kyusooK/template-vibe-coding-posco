---
description: "@/{service name}-store 모듈 코드 생성 규칙 - 데이터 저장소 및 영속성 계층"
globs: ["**/**-store/**"]
alwaysApply: false
---

# Store Generation Rules - {service name}-store 모듈

## 패키지 구조

```
{service name}-store/
├── pom.xml                                    # Maven 프로젝트 설정 (고정 생성)
├── src/
│   ├── main/
│   │   ├── java/
│   │   │   └── com/
│   │   │       └── poscodx/
│   │   │           └── sample/
│   │   │               └── {service name}/
│   │   │                   └── store/
│   │   │                       ├── domain/
│   │   │                       │   ├── entity/      # 도메인 엔티티 (유동 생성)
│   │   │                       │   │   └── {entityName}.java
│   │   │                       │   └── logic/       # 비즈니스 로직 (유동 생성)
│   │   │                       │       └── {entityName}Logic.java
│   │   │                       ├── postgresql/
│   │   │                       │   ├── jpo/         # JPA 엔티티 (유동 생성)
│   │   │                       │   │   └── {entityName}Jpo.java
│   │   │                       │   ├── repository/  # JPA Repository (유동 생성)
│   │   │                       │   │   └── {entityName}PostgresqlRepository.java
│   │   │                       │   └── {entityName}PostgresqlStore.java  # Store 구현체 (유동 생성)
│   │   │                       └── {entityName}Store.java  # Store 인터페이스 (유동 생성)
│   │   └── resources/
│   └── test/
│       ├── java/
│       │   └── com/
│       │       └── poscodx/
│       │           └── sample/
│       │               └── {service name}/
│       │                   └── store/
│       │                       └── {entityName}StoreTest.java  # 테스트 클래스 (유동 생성)
│       └── resources/
│           └── application.yml              # 테스트 설정 (고정 생성)

```

## 고정 생성 파일들

### 1. pom.xml
Maven 프로젝트 설정 파일로, `@pom-generation-rules`를 참고하여 의존성과 빌드 설정이 정의되어 있습니다.

### 2. application.yml (test)
테스트용 애플리케이션 설정 파일입니다.

```yaml
spring:
  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password:
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: create-drop
```

## 유동 생성 파일들 규칙

DDD 마이크로서비스의 성격에 따라 boundedContext의 Aggregate별 생성될 파일들이며, 해당 메타데이터를 참고하여 유동적으로 세부 코드, 경로가 변경되어야한다.

### 1. {entityName}.java (도메인 엔티티)
도메인 모델을 나타내는 엔티티 클래스입니다.

**생성 규칙:**
- 패키지명: `com.poscodx.sample.{프로젝트명}.store.domain.entity`
- 클래스명: `{entityName}` (첫 글자 소문자)
- 상속: PoscoEntity
- 어노테이션: `@Getter`, `@Setter`, `@NoArgsConstructor`

**예시 코드:**
```java
package com.poscodx.sample.msaez0.store.domain.entity;

import java.sql.Timestamp;
import com.poscodx.base.share.domain.PoscoEntity;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * Auto generated class
 * 
 * 자동생성 프로그램 버전 : 1.0.0
 * 생성일시 :  {현재날짜시간}
 * @FileName : 클래스에 대한 한글 명칭
 * Change history
 * @수정날짜;SCR_NO;수정자;수정내용
 * @{현재날짜시간};00000;홍길동;최초생성
 * 
 */
@Getter
@Setter
@NoArgsConstructor
public class project extends PoscoEntity {
    private Integer id;
    private String pname;
    private String url;
    private String lead;
    private String description;
    private String pkey;
    private Integer pcounter;
    private Integer assigneetype;
    private Integer avatar;
    private String originalkey;
    private String projecttype;
    private Timestamp updated;
    private Timestamp created;
    private Integer updatedby;
    private Integer createdby;
}
```

### 2. {entityName}Logic.java (비즈니스 로직)
엔티티에 대한 비즈니스 로직을 처리하는 서비스 클래스입니다.

**생성 규칙:**
- 패키지명: `com.poscodx.sample.{프로젝트명}.store.domain.logic`
- 클래스명: `{entityName}Logic` (첫 글자 소문자)
- 어노테이션: `@Service`, `@Transactional`
- 의존성: MessageSource, {entityName}Store

**예시 코드:**
```java
package com.poscodx.sample.msaez0.store.domain.logic;

import java.util.List;
import com.poscodx.base.share.domain.NameValueList;
import com.poscodx.sample.msaez0.store.domain.entity.project;
import com.poscodx.sample.msaez0.store.projectStore;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.MessageSource;
import org.springframework.stereotype.Service;

/**
 * Auto generated class
 * 
 * 자동생성 프로그램 버전 : 1.0.0
 * 생성일시 :  {현재날짜시간}
 * @FileName : 클래스에 대한 한글 명칭
 * Change history
 * @수정날짜;SCR_NO;수정자;수정내용
 * @{현재날짜시간};00000;홍길동;최초생성
 * 
 */
@Slf4j
@RequiredArgsConstructor
@Transactional
@Service
public class projectLogic {
    private final MessageSource messageSource;
    private final projectStore store;

    public List<project> findAll() {
        return this.store.retrieveAll();
    }

    public project find(Integer id) {
        return this.store.retrieve(id);
    }

    public void remove(Integer id) {
        this.store.delete(id);
    }

    public project register(project entity) {
        return this.store.create(entity);
    }

    public project modify(Integer id, NameValueList nameValues) {
        project entity = this.store.retrieve(id);
        entity.setValues(nameValues);
        return this.store.update(entity);
    }
}
```

### 3. {entityName}Store.java (Store 인터페이스)
데이터 저장소 접근을 위한 인터페이스입니다.

**생성 규칙:**
- 패키지명: `com.poscodx.sample.{프로젝트명}.store`
- 클래스명: `{entityName}Store` (첫 글자 소문자)
- 타입: interface
- 메서드: retrieveAll, retrieve, create, update, delete

**예시 코드:**
```java
package com.poscodx.sample.msaez0.store;

import java.util.List;
import com.poscodx.sample.msaez0.store.domain.entity.project;

/**
 * Auto generated class
 * 
 * 자동생성 프로그램 버전 : 1.0.0
 * 생성일시 :  {현재날짜시간}
 * @FileName : 클래스에 대한 한글 명칭
 * Change history
 * @수정날짜;SCR_NO;수정자;수정내용
 * @{현재날짜시간};00000;홍길동;최초생성
 * 
 */
public interface projectStore {

    List<project> retrieveAll();

    void delete(Integer id);

    project retrieve(Integer id);

    project update(project entity);

    project create(project entity);
}
```

### 4. {entityName}PostgresqlStore.java (Store 구현체)
PostgreSQL을 사용한 Store 인터페이스 구현체입니다.

**생성 규칙:**
- 패키지명: `com.poscodx.sample.{프로젝트명}.store.postgresql`
- 클래스명: `{entityName}PostgresqlStore` (첫 글자 소문자)
- 어노테이션: `@Repository`
- 구현: {entityName}Store 인터페이스
- 의존성: {entityName}PostgresqlRepository

**예시 코드:**
```java
package com.poscodx.sample.msaez0.store.postgresql;

import java.util.List;
import java.util.Optional;
import com.poscodx.sample.msaez0.store.domain.entity.project;
import com.poscodx.sample.msaez0.store.postgresql.jpo.projectJpo;
import com.poscodx.sample.msaez0.store.postgresql.repository.projectPostgresqlRepository;
import com.poscodx.sample.msaez0.store.projectStore;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Repository;

/**
 * Auto generated class
 * 
 * 자동생성 프로그램 버전 : 1.0.0
 * 생성일시 :  {현재날짜시간}
 * @FileName : 클래스에 대한 한글 명칭
 * Change history
 * @수정날짜;SCR_NO;수정자;수정내용
 * @{현재날짜시간};00000;홍길동;최초생성
 * 
 */
@Slf4j
@RequiredArgsConstructor
@Repository
public class projectPostgresqlStore implements projectStore {
    private final projectPostgresqlRepository repository;

    @Override
    public List<project> retrieveAll() {
        List<projectJpo> jpos = this.repository.findAll();
        return projectJpo.toDomains(jpos);
    }

    @Override
    public project retrieve(Integer id) {
        Optional<projectJpo> retVal = this.repository.findById(id);
        if (retVal.isPresent()) {
            return retVal.get().toDomain();
        } else {
            return null;
        }
    }

    @Override
    public void delete(Integer id) {
        this.repository.deleteById(id);
    }

    @Override
    public project update(project entity) {
        projectJpo jpoToUpdate = new projectJpo(entity);
        projectJpo updatedJpo = this.repository.save(jpoToUpdate);
        return updatedJpo.toDomain();
    }

    @Override
    public project create(project entity) {
        projectJpo jpoToSave = new projectJpo(entity);
        projectJpo savedJpo = this.repository.save(jpoToSave);
        return savedJpo.toDomain();
    }
}
```

### 5. {entityName}Jpo.java (JPA 엔티티)
데이터베이스 테이블과 매핑되는 JPA 엔티티 클래스입니다.

**생성 규칙:**
- 패키지명: `com.poscodx.sample.{프로젝트명}.store.postgresql.jpo`
- 클래스명: `{entityName}Jpo` (첫 글자 소문자)
- 상속: PoscoEntityJpo
- 어노테이션: `@Entity`, `@Table`, `@Getter`, `@Setter`, `@NoArgsConstructor`

**예시 코드:**
```java
package com.poscodx.sample.msaez0.store.postgresql.jpo;

import java.sql.Timestamp;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;
import com.poscodx.base.share.exception.PoscoException;
import com.poscodx.base.share.jpo.PoscoEntityJpo;
import com.poscodx.sample.msaez0.store.domain.entity.project;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.springframework.beans.BeanUtils;

/**
 * Auto generated class
 * 
 * 자동생성 프로그램 버전 : 1.0.0
 * 생성일시 :  {현재날짜시간}
 * @FileName : 클래스에 대한 한글 명칭
 * Change history
 * @수정날짜;SCR_NO;수정자;수정내용
 * @{현재날짜시간};00000;홍길동;최초생성
 * 
 */
@Getter
@Setter
@NoArgsConstructor
@Entity(name = "projectJpo")
@Table(name = "project", schema = "public")
public class projectJpo extends PoscoEntityJpo {
    @Id
    @Column(name = "id")
    private Integer id;
    @Column(name = "pname")
    private String pname;
    @Column(name = "url")
    private String url;
    @Column(name = "lead")
    private String lead;
    @Column(name = "description")
    private String description;
    @Column(name = "pkey")
    private String pkey;
    @Column(name = "pcounter")
    private Integer pcounter;
    @Column(name = "assigneetype")
    private Integer assigneetype;
    @Column(name = "avatar")
    private Integer avatar;
    @Column(name = "originalkey")
    private String originalkey;
    @Column(name = "projecttype")
    private String projecttype;
    @Column(name = "updated")
    private Timestamp updated;
    @Column(name = "created")
    private Timestamp created;
    @Column(name = "updatedby")
    private Integer updatedby;
    @Column(name = "createdby")
    private Integer createdby;

    public projectJpo(project entity) {
        BeanUtils.copyProperties(entity, this);
    }

    @Override
    public void validateJpo() throws PoscoException {
    }

    public project toDomain() {
        project entity = new project();
        BeanUtils.copyProperties(this, entity);
        return entity;
    }

    public static List<project> toDomains(Iterable<projectJpo> jpos) {
        return StreamSupport.stream(jpos.spliterator(), false)
                .map(projectJpo::toDomain)
                .collect(Collectors.toList());
    }
}
```

### 6. {entityName}PostgresqlRepository.java (JPA Repository)
Spring Data JPA Repository 인터페이스입니다.

**생성 규칙:**
- 패키지명: `com.poscodx.sample.{프로젝트명}.store.postgresql.repository`
- 클래스명: `{entityName}PostgresqlRepository` (첫 글자 소문자)
- 타입: interface
- 상속: JpaRepository<{entityName}Jpo, {IdType}>

**예시 코드:**
```java
package com.poscodx.sample.msaez0.store.postgresql.repository;

import com.poscodx.sample.msaez0.store.postgresql.jpo.projectJpo;
import org.springframework.data.jpa.repository.JpaRepository;

/**
 * Auto generated class
 * 
 * 자동생성 프로그램 버전 : 1.0.0
 * 생성일시 :  {현재날짜시간}
 * @FileName : 클래스에 대한 한글 명칭
 * Change history
 * @수정날짜;SCR_NO;수정자;수정내용
 * @{현재날짜시간};00000;홍길동;최초생성
 * 
 */
public interface projectPostgresqlRepository extends JpaRepository<projectJpo, Integer> {
}
```

## 생성 지침

1. **고정 생성 파일들**은 위에 명시된 내용을 기반으로 서비스명에 맞게 생성합니다.
2. **유동 생성 파일들**은 도메인 엔티티 메타데이터를 기반으로 동적으로 생성합니다.
3. 모든 Java 클래스에는 표준 헤더 주석(자동생성 정보, 생성일시, 변경이력)을 포함해야 합니다.
4. Entity는 도메인 모델을, Jpo는 데이터베이스 매핑을 담당하며 서로 변환 메서드를 제공합니다.
5. Logic 클래스는 비즈니스 로직을, Store는 데이터 접근을 추상화합니다.
6. PostgreSQL 구현체는 JPA Repository를 사용하여 실제 데이터베이스 작업을 수행합니다.
7. 의존성 주입은 생성자 주입 방식(`@RequiredArgsConstructor`)을 사용합니다.
8. **DDD 마이크로서비스 기반 변경사항**: 파일의 경로와 세부 내용은 DDD 마이크로서비스에 의거하여 변경되어야 하는 사항들에 대해 Metadata를 참조하여 만들어야 합니다.
