---

description: "Used as reference when generating store module code for configuring package structure, fixed generation files, and dynamic generation files."
alwaysApply: false
---

# Store Generation Rules - {service name}-store module

## Package Structure

### Generation Rules
Since code generation is requested by Aggregate unit in DDD Model, if the module structure has already been created, skip the package structure creation and proceed with generating files that should be created for each Aggregate unit.

```
{service name}/
└── {service name}-store/
    ├── pom.xml                                    # Maven project configuration (Fixed Generation)
    ├── src/
    │   ├── main/
    │   │   ├── java/
    │   │   │   └── com/
    │   │   │       └── poscodx/
    │   │   │           └── sample/
    │   │   │               └── {service name}/
    │   │   │                   └── store/
    │   │   │                       ├── domain/
    │   │   │                       │   ├── entity/      # Domain entities (Dynamic Generation)
    │   │   │                       │   │   └── {entityName}.java
    │   │   │                       │   └── logic/       # Business logic (Dynamic Generation)
    │   │   │                       │       └── {entityName}Logic.java
    │   │   │                       ├── postgresql/
    │   │   │                       │   ├── jpo/         # JPA entities (Dynamic Generation)
    │   │   │                       │   │   └── {entityName}Jpo.java
    │   │   │                       │   ├── repository/  # JPA Repository (Dynamic Generation)
    │   │   │                       │   │   └── {entityName}PostgresqlRepository.java
    │   │   │                       │   └── {entityName}PostgresqlStore.java  # Store implementation (Dynamic Generation)
    │   │   │                       └── {entityName}Store.java  # Store interface (Dynamic Generation)
    │   │   └── resources/
```

## Fixed Generation Files

### 1. pom.xml
Maven project configuration file with dependencies and build settings defined by referencing `@pom-generation-rules`.

## Dynamic Generation Files Rules

Files to be generated for each Aggregate of boundedContext according to the nature of DDD microservices, and detailed code and paths should be changed dynamically by referencing the metadata.

### 1. {entityName}.java (Domain Entity)
Entity class representing the domain model.

**Generation Rules:**
- Package name: `com.poscodx.sample.{project name}.store.domain.entity`
- Class name: `{entityName}` (first letter lowercase)
- Inheritance: PoscoEntity
- Annotations: `@Getter`, `@Setter`, `@NoArgsConstructor`

**Example Code:**
```java
package com.poscodx.sample.{service name}.store.domain.entity;

import java.sql.Timestamp;
import com.poscodx.base.share.domain.PoscoEntity;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * Auto generated class
 * 
 * 자동생성 프로그램 버전 : 1.0.0
 * 생성일시 :  2025-06-25 09:50:25.681
 * @FileName : 클래스에 대한 한글 명칭
 * Change history
 * @수정날짜;SCR_NO;수정자;수정내용
 * @2025-06-25 09:50:25.681;00000;홍길동;최초생성
 * 
 */
@Getter
@Setter
@NoArgsConstructor
public class project
    extends PoscoEntity
{
    private Integer id;
    private String pname;
    private String url;
    private String lead;
    private String description;
    private String pkey;
    private Integer pcounter;
    private Integer assigneetype;
    private Integer avatar;
    private String originalkey;
    private String projecttype;
    private Timestamp updated;
    private Timestamp created;
    private Integer updatedby;
    private Integer createdby;
}
```

### 2. {entityName}Logic.java (Business Logic)
Service class that handles business logic for entities.

**Generation Rules:**
- Package name: `com.poscodx.sample.{project name}.store.domain.logic`
- Class name: `{entityName}Logic` (first letter lowercase)
- Annotations: `@Service`, `@Transactional`
- Dependencies: MessageSource, {entityName}Store

**Example Code:**
```java
package com.poscodx.sample.{service name}.store.domain.logic;

import java.util.List;
import com.poscodx.base.share.domain.NameValueList;
import com.poscodx.sample.{service name}.store.domain.entity.project;
import com.poscodx.sample.{service name}.store.projectStore;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.MessageSource;
import org.springframework.stereotype.Service;

@Slf4j
@RequiredArgsConstructor
@Transactional
@Service
public class projectLogic {
    private final MessageSource messageSource;
    private final projectStore store;

    public List<project> findAll() {
        return this.store.retrieveAll();
    }

    public project find(Integer id) {
        return this.store.retrieve(id);
    }

    public void remove(Integer id) {
        this.store.delete(id);
    }

    public project register(project entity) {
        return this.store.create(entity);
    }

    public project modify(Integer id, NameValueList nameValues) {
        project entity = this.store.retrieve(id);
        entity.setValues(nameValues);
        return this.store.update(entity);
    }
}
```

### 3. {entityName}Store.java (Store Interface)
Interface for data store access.

**Generation Rules:**
- Package name: `com.poscodx.sample.{project name}.store`
- Class name: `{entityName}Store` (first letter lowercase)
- Type: interface
- Methods: retrieveAll, retrieve, create, update, delete

**Example Code:**
```java
package com.poscodx.sample.{service name}.store;

import java.util.List;
import com.poscodx.sample.{service name}.store.domain.entity.project;

public interface projectStore {

    List<project> retrieveAll();

    void delete(Integer id);

    project retrieve(Integer id);

    project update(project entity);

    project create(project entity);
}
```

### 4. {entityName}PostgresqlStore.java (Store Implementation)
Store interface implementation using PostgreSQL.

**Generation Rules:**
- Package name: `com.poscodx.sample.{project name}.store.postgresql`
- Class name: `{entityName}PostgresqlStore` (first letter lowercase)
- Annotations: `@Repository`
- Implementation: {entityName}Store interface
- Dependencies: {entityName}PostgresqlRepository

**Example Code:**
```java
package com.poscodx.sample.{service name}.store.postgresql;

import java.util.List;
import java.util.Optional;
import com.poscodx.sample.{service name}.store.domain.entity.project;
import com.poscodx.sample.{service name}.store.postgresql.jpo.projectJpo;
import com.poscodx.sample.{service name}.store.postgresql.repository.projectPostgresqlRepository;
import com.poscodx.sample.{service name}.store.projectStore;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Repository;

/**
 * Auto generated class
 * 
 * 자동생성 프로그램 버전 : 1.0.0
 * 생성일시 :  2025-06-25 09:50:25.681
 * @FileName : 클래스에 대한 한글 명칭
 * Change history
 * @수정날짜;SCR_NO;수정자;수정내용
 * @2025-06-25 09:50:25.681;00000;홍길동;최초생성
 * 
 */
@Slf4j
@RequiredArgsConstructor
@Repository
public class projectPostgresqlStore
    implements projectStore
{
    private final projectPostgresqlRepository repository;

    @Override
    public List<project> retrieveAll() {
        List<projectJpo> jpos = this.repository.findAll();
        return projectJpo.toDomains(jpos);
    }

    @Override
    public project retrieve(Integer id) {
        Optional<projectJpo> retVal = this.repository.findById(id);
        if (retVal.isPresent()) {
            return retVal.get().toDomain();
        } else {
            return null;
        }
    }

    @Override
    public void delete(Integer id) {
        this.repository.deleteById(id);
    }

    @Override
    public project update(project entity) {
        projectJpo jpoToUpdate = new projectJpo(entity);
        projectJpo updatedJpo = this.repository.save(jpoToUpdate);
        return updatedJpo.toDomain();
    }

    @Override
    public project create(project entity) {
        projectJpo jpoToSave = new projectJpo(entity);
        projectJpo savedJpo = this.repository.save(jpoToSave);
        return savedJpo.toDomain();
    }
}
```

### 5. {entityName}Jpo.java (JPA Entity)
JPA entity class mapped to database tables.

**Generation Rules:**
- Package name: `com.poscodx.sample.{project name}.store.postgresql.jpo`
- Class name: `{entityName}Jpo` (first letter lowercase)
- Inheritance: PoscoEntityJpo
- Annotations: `@Entity`, `@Table`, `@Getter`, `@Setter`, `@NoArgsConstructor`

**Example Code:**
```java
package com.poscodx.sample.{service name}.store.postgresql.jpo;

import java.sql.Timestamp;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;
import com.poscodx.base.share.exception.PoscoException;
import com.poscodx.base.share.jpo.PoscoEntityJpo;
import com.poscodx.sample.{service name}.store.domain.entity.project;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.springframework.beans.BeanUtils;

@Getter
@Setter
@NoArgsConstructor
@Entity(name = "projectJpo")
@Table(name = "project", schema = "public")
public class projectJpo
    extends PoscoEntityJpo
{
    @Id
    @Column(name = "id")
    private Integer id;
    @Column(name = "pname")
    private String pname;
    @Column(name = "url")
    private String url;
    @Column(name = "lead")
    private String lead;
    @Column(name = "description")
    private String description;
    @Column(name = "pkey")
    private String pkey;
    @Column(name = "pcounter")
    private Integer pcounter;
    @Column(name = "assigneetype")
    private Integer assigneetype;
    @Column(name = "avatar")
    private Integer avatar;
    @Column(name = "originalkey")
    private String originalkey;
    @Column(name = "projecttype")
    private String projecttype;
    @Column(name = "updated")
    private Timestamp updated;
    @Column(name = "created")
    private Timestamp created;
    @Column(name = "updatedby")
    private Integer updatedby;
    @Column(name = "createdby")
    private Integer createdby;

    public projectJpo(project entity) {
        BeanUtils.copyProperties(entity, this);
    }

    @Override
    public void validateJpo()
        throws PoscoException
    {
    }

    public project toDomain() {
        project entity = new project();
        BeanUtils.copyProperties(this, entity);
        return entity;
    }

    public static List<project> toDomains(Iterable<projectJpo> jpos) {
        return StreamSupport.stream(jpos.spliterator(), false).map((projectJpo::toDomain)).collect(Collectors.toList());
    }
}
```

### 6. {entityName}PostgresqlRepository.java (JPA Repository)
Spring Data JPA Repository interface.

**Generation Rules:**
- Package name: `com.poscodx.sample.{project name}.store.postgresql.repository`
- Class name: `{entityName}PostgresqlRepository` (first letter lowercase)
- Type: interface
- Inheritance: JpaRepository<{entityName}Jpo, {IdType}>

**Example Code:**
```java
package com.poscodx.sample.{service name}.store.postgresql.repository;

import com.poscodx.sample.{service name}.store.postgresql.jpo.projectJpo;
import org.springframework.data.jpa.repository.JpaRepository;

public interface projectPostgresqlRepository
    extends JpaRepository<projectJpo, Integer>
{
}
```

## Generation Guidelines

1. **Fixed generation files** are generated based on the content specified above according to the service name.
2. **Dynamic generation files** are generated dynamically based on domain entity metadata.
3. **Package structure** is unified in the form of `com.poscodx.sample.{service name}`.
4. Entity handles domain models, Jpo handles database mapping, and they provide conversion methods to each other.
5. Logic classes handle business logic, and Store abstracts data access.
6. PostgreSQL implementation performs actual database operations using JPA Repository.
7. Dependency injection uses constructor injection method (`@RequiredArgsConstructor`).
8. **DDD microservice-based changes**: File paths and detailed content should be created by referencing metadata for changes that need to be made based on DDD microservices.
